<?php
/**
 * Created by PhpStorm
 * User: 陈志洪
 * Date: 2020/1/21
 * Time: 20:12
 */

namespace app\api\controller;

use app\common\controller\Api;
use app\lib\exception\ParameterException;
use Endroid\QrCode\QrCode;
use think\Cache;
use think\Request;

class Base extends Api
{
    protected $noNeedLogin = [];

    public function __construct()
    {
        // 前置操作方法
        if ($this->beforeActionList) {
            foreach ($this->beforeActionList as $method => $options) {
                is_numeric($method) ?
                    $this->beforeAction($options) :
                    $this->beforeAction($method, $options);
            }
        }
    }

    // 重构操作成功返回的数据
    protected function success($msg = '', $data = null, $code = 200, $type = 'json', array $header = [])
    {
        // TODO: Change the autogenerated stub
        parent::success($msg, $data, $code, $type, $header);
    }

    // 重构操作失败返回的数据
    protected function error($msg = '', $data = null, $code = 400, $type = 'json', array $header = [])
    {
        // TODO: Change the autogenerated stub
        parent::error($msg, $data, $code, $type, $header);
    }

    // 重构验证数据
    protected function validate($data, $validate, $message = [], $batch = false, $callback = null)
    {
        // TODO: Change the autogenerated stub
        $result = parent::validate($data, $validate, $message, $batch, $callback);

        if ($result !== true) {
            throw new ParameterException(10001, $result);
        }

        return true;
    }

    // 根据逗号分割，丢进数组内
    public static function getArrayByExplode($string)
    {
        return explode(',', $string);
    }

    // 删除最后一个字符
    public static function delEndString($string)
    {
        return substr($string, 0, strlen($string) - 1);
    }

    /**
     * 截取富文本字符
     * @param $string string 文本内容
     * @param $num int 截取长度
     * @return string
     */
    public static function stringToText($string, $num)
    {
        if ($string) {
            //把一些预定义的 HTML 实体转换为字符
            $html_string = htmlspecialchars_decode($string);
            //将空格替换成空
            $content = str_replace(" ", "", $html_string);
            //函数剥去字符串中的 HTML、XML 以及 PHP 的标签,获取纯文本内容
            $contents = strip_tags($content);
            //返回字符串中的前$num字符串长度的字符
            return mb_strlen($contents, 'utf-8') > $num ?
                mb_substr($contents, 0, $num, "utf-8") . '...' :
                mb_substr($contents, 0, $num, "utf-8");
        } else {
            return $string;
        }
    }

    // 校验参数是否是正整数
    public static function checkIsIntNumberByArray($array)
    {
        $match = "/^[1-9][0-9]*$/";

        foreach ($array as $value) {
            if (!preg_match($match, $value)) {
                return false;
            }
        }

        return true;
    }

    // 生成订单号
    public static function makeOrderNo($key = '')
    {
        return self::getLetter(intval(date('Y') - 2020))
            . $key
            . intval(date('Y')) // 获取当前年份
            . intval(date('m')) // 获取月份
            . intval(date('d')) // 日
            . substr(time(), -5) // 时间戳生成
            . sprintf('%02d', rand(00, 99)); // 从 00-99 之间取一个随机数
    }

    // get 请求数据
    public static function getCurl($url, &$httpCode = 0)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // 不做证书校验，部署在Linux环境下请改为true
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, strpos(PHP_OS, "Linux") ? true : false);

        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
        $file_contents = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        return $file_contents;
    }

    # post 请求
    public static function postCurl($url, $data)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // post数据
        curl_setopt($ch, CURLOPT_POST, 1);
        // post的变量
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

        $output = curl_exec($ch);
        curl_close($ch);

        return $output;
    }

    # 获取字母数组 [A,B,C,D]
    public static function getLetter($key)
    {
        $arr = Cache::get('letterArr'); # 从缓存获取字母

        if (!$arr) {
            $arr = array();

            for ($i = 0; $i <= 1000; $i++) {
                $y = ($i / 26);
                if ($y >= 1) {
                    $y = intval($y);
                    $first = chr($y + 64);
                    $end = chr($i - $y * 26 + 65);
                    array_push($arr, $first . $end);
                } else {
                    array_push($arr, chr($i+65));
                }
            }
        }

        return $arr[$key];
    }

    # 生成二维码
    public static function getQRCOde($content)
    {
        $path = Request::instance()->domain();

        // 创建基本二维码
        $qrCode = new QrCode($content);
        $qrCode->setSize(300); // 尺寸
        $file_name = md5(microtime(true) . time()); // 文件名称

        # 判断目录是否存在，不存在则创建
        if (!is_readable(ROOT_PATH . 'public' . DS .'qrcode')) {
            is_file($path) or mkdir(ROOT_PATH . 'public' . DS .'qrcode', 0777);
        }

        $string = ROOT_PATH . 'public' . DS .'qrcode' . DS . $file_name . '.png';
        $qrCode->writeFile($string); // 保存二维码图片

        return $path . '/qrcode/' . $file_name . '.png';
    }
}
